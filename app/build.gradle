apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

    defaultConfig {
        applicationId "com.doctoror.particleswallpaper"

        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]

        versionCode 7
        versionName "1.0.6"

        resConfigs "en", "ru", "uk"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {

        release {
            storeFile file("../keystore/upload.jks")
        }
    }

    flavorDimensions "default"

    productFlavors {
        noAds {

        }

        withAds {

        }
    }

    applicationVariants.all { variant ->
        if (variant.getName() == "withAdsRelease") {
            variant.buildConfigField 'String', 'AD_APP_ID', rootProject.ext.adAppId
            variant.resValue 'string', 'AD_BANNER_ID', rootProject.ext.adBannerId
        } else if (variant.getName() == "withAdsDebug") {
            variant.buildConfigField 'String', 'AD_APP_ID', rootProject.ext.adAppId
            variant.resValue 'string', 'AD_BANNER_ID', '"ca-app-pub-3940256099942544/6300978111"'
        } else {
            variant.buildConfigField 'String', 'AD_APP_ID', '""'
            variant.resValue 'string', 'AD_BANNER_ID', '""'
        }
    }

    buildTypes {

        debug {
        }

        release {
            debuggable false
            signingConfig signingConfigs.release

            if (project.hasProperty('keyAlias')) {
                android.signingConfigs.release.keyAlias = keyAlias
            }

            if (project.hasProperty('storePassword')) {
                android.signingConfigs.release.storePassword = storePassword
            }

            if (project.hasProperty('keyPassword')) {
                android.signingConfigs.release.keyPassword = keyPassword
            }

            minifyEnabled true
            shrinkResources true

            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile 'proguard-ads.pro'
            proguardFile 'proguard-glide.pro'
            proguardFile 'proguard-lifecycle.pro'
            proguardFile 'proguard-rx-java.pro'
            proguardFile 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkAllWarnings true
    }

    task copyTestClasses(type: Copy) {
        from "build/tmp/kotlin-classes/debugUnitTest"
        into "build/intermediates/classes/debug"
    }

    task copySdkClasses(type: Copy) {
        from "build/tmp/kotlin-classes/debug"
        into "build/intermediates/classes/debug"
    }

//    afterEvaluate {
//        compileDebugUnitTestSources.dependsOn copyTestClasses
//        compileReleaseUnitTestSources.dependsOn copyTestClasses
//        compileDebugAndroidTestSources.dependsOn copySdkClasses
//    }
}

dependencies {
    def d = rootProject.ext.wallpaperappDependencies
    def td = rootProject.ext.wallpaperappTestDependencies

    androidTestImplementation td.testRunner
    androidTestImplementation td.testRules
    androidTestImplementation td.kotlin
    androidTestImplementation td.kotlinTest
    androidTestImplementation td.kotlinReflect

    testImplementation td.junit
    testImplementation td.kotlin
    testImplementation td.kotlinTest
    testImplementation td.kotlinReflect
    testImplementation td.mockitoCore

    implementation d.kotlin
    implementation d.rxJava
    implementation d.rxAndroid

    implementation d.particlesDrawable
    implementation d.colorPicker

    implementation d.supportV4
    implementation d.supportAnnotations

    withAdsImplementation d.ads

    implementation(d.licencesDialog) {
        exclude(group: 'com.android.support', module: 'appcompat-v7')
    }

    implementation d.glide
    kapt d.glideCompiler

    implementation d.gendalf
    kapt d.gendalfCompiler

    implementation d.dagger
    kapt d.daggerCompiler

    implementation d.lifecycle
    kapt d.lifecycleCompiler
}

repositories {
    mavenCentral()
}
