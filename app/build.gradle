apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

    defaultConfig {
        applicationId "com.doctoror.particleswallpaper"

        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]

        versionCode 5
        versionName "1.0.4"

        resConfigs "en", "ru", "uk"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {

        release {
            storeFile file("../keystore/upload.jks")
        }
    }

    buildTypes {

        debug {
            buildConfigField 'String', 'AD_APP_ID', rootProject.ext.adAppId
            resValue 'string', 'AD_BANNER_ID', '"ca-app-pub-3940256099942544/6300978111"'
        }

        release {
            buildConfigField 'String', 'AD_APP_ID', rootProject.ext.adAppId
            resValue 'string', 'AD_BANNER_ID', rootProject.ext.adBannerId

            debuggable false
            signingConfig signingConfigs.release

            if (project.hasProperty('keyAlias')) {
                android.signingConfigs.release.keyAlias = keyAlias
            }

            if (project.hasProperty('storePassword')) {
                android.signingConfigs.release.storePassword = storePassword
            }

            if (project.hasProperty('keyPassword')) {
                android.signingConfigs.release.keyPassword = keyPassword
            }

            minifyEnabled true
            shrinkResources true

            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile 'proguard-ads.pro'
            proguardFile 'proguard-glide.pro'
            proguardFile 'proguard-lifecycle.pro'
            proguardFile 'proguard-rx-java.pro'
            proguardFile 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkAllWarnings true
    }

    task copyTestClasses(type: Copy) {
        from "build/tmp/kotlin-classes/debugUnitTest"
        into "build/intermediates/classes/debug"
    }

    task copySdkClasses(type: Copy) {
        from "build/tmp/kotlin-classes/debug"
        into "build/intermediates/classes/debug"
    }

//    afterEvaluate {
//        compileDebugUnitTestSources.dependsOn copyTestClasses
//        compileReleaseUnitTestSources.dependsOn copyTestClasses
//        compileDebugAndroidTestSources.dependsOn copySdkClasses
//    }
}

dependencies {
    def d = rootProject.ext.wallpaperappDependencies
    def td = rootProject.ext.wallpaperappTestDependencies

    testCompile td.kotlin
    testCompile td.kotlinTest
    testCompile td.kotlinReflect
    testCompile td.mockitoCore

    testCompile td.junit

    compile d.kotlin
    compile d.rxJava
    compile d.rxAndroid

    compile d.particlesDrawable
    compile d.colorPicker

    compile(d.ads) {
        exclude(group: 'com.android.support')
    }

    compile(d.licencesDialog) {
        exclude(group: 'com.android.support')
    }

    compile d.glide
    annotationProcessor d.glideCompiler
    kapt d.glideCompiler

    compile d.gendalf
    annotationProcessor d.gendalfCompiler
    kapt d.gendalfCompiler

    compile d.dagger
    annotationProcessor d.daggerCompiler
    kapt d.daggerCompiler

    compile d.lifecycle
    annotationProcessor d.lifecycleCompiler
    kapt d.lifecycleCompiler
}

repositories {
    mavenCentral()
}
